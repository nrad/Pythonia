<?xml version="1.0" encoding="UTF-8"?><modul xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="modul.xsd" name="Sequencer" description="Analog style 8 step sequencer">  <input>    <vardef name="step" csType="k" value="1" min="0" max="1" digits="0" description="Trigger or clock signal" />    <vardef name="reset" csType="k" value="0" min="0" max="1" digits="0" description="Resets to val1" />    <vardef name="steps" csType="k" value="8" min="1" max="8" digits="0" description="Number of steps" />    <vardef name="val1" csType="k" value="60" min="0" max="127" digits="0" description="Value for step 1" />    <vardef name="val2" csType="k" value="61" min="0" max="127" digits="0" description="Value for step 2" />    <vardef name="val3" csType="k" value="62" min="0" max="127" digits="0" description="Value for step 3" />    <vardef name="val4" csType="k" value="63" min="0" max="127" digits="0" description="Value for step 4" />    <vardef name="val5" csType="k" value="64" min="0" max="127" digits="0" description="Value for step 5" />    <vardef name="val6" csType="k" value="65" min="0" max="127" digits="0" description="Value for step 6" />    <vardef name="val7" csType="k" value="66" min="0" max="127" digits="0" description="Value for step 7" />    <vardef name="val8" csType="k" value="67" min="0" max="127" digits="0" description="Value for step 8" />  </input>  <output>    <vardef name="out" csType="k" description="Output value"/>    <vardef name="gate" csType="k" description="Gate signal if val is not 0"/>  </output>  <opcode>/* Analog style 8 step sequencer */opcode Sequencer, kk, kkkkkkkkkkk  kstep, kreset, ksteps, kval1, kval2, kval3, kval4, kval5, kval6, kval7, kval8 xin  kclock     init  0  klaststep  init  0  klastreset init  0  kstep    limit     kstep, 0, 1  kreset   limit     kreset, 0, 1  ksteps   limit     ksteps, 1, 8  ksteps   =         int(ksteps)  kval1   limit     kval1, 0, 127  kval1   =         int(kval1)  kval2   limit     kval2, 0, 127  kval2   =         int(kval2)  kval3   limit     kval3, 0, 127  kval3   =         int(kval3)  kval4   limit     kval4, 0, 127  kval4   =         int(kval4)  kval5   limit     kval5, 0, 127  kval5   =         int(kval5)  kval6   limit     kval6, 0, 127  kval6   =         int(kval6)  kval7   limit     kval7, 0, 127  kval7   =         int(kval7)  kval8   limit     kval8, 0, 127  kval8   =         int(kval8)  if (kclock == 1) then    kval = kval1  elseif (kclock == 2) then    kval = kval2  elseif (kclock == 3) then    kval = kval3  elseif (kclock == 4) then    kval = kval4  elseif (kclock == 5) then    kval = kval5  elseif (kclock == 6) then    kval = kval6  elseif (kclock == 7) then    kval = kval7  elseif (kclock == 8) then    kval = kval8  endif    if (klaststep == 0 &amp;&amp; kstep == 1) then    kclock = kclock + 1  endif  if (kclock == ksteps+1) then    kclock = 1  endif  if (kval == 0) then    kgate = 0  else    kgate = 1  endif  if (klastreset == 0 &amp;&amp; kreset == 1) then    kclock = 1  endif  klaststep = kstep  klastreset = kreset  xout kval, kgateendop  </opcode></modul>